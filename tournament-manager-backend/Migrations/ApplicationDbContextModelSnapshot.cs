// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tournament_manager_backend.Data;

#nullable disable

namespace tournament_manager_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("tournament_manager_backend.Models.Auth.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.BracketMatches", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchID"));

                    b.Property<DateTime?>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("Team1ID")
                        .HasColumnType("int");

                    b.Property<int>("Team2ID")
                        .HasColumnType("int");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerTeamID")
                        .HasColumnType("int");

                    b.HasKey("MatchID");

                    b.HasIndex("Team1ID");

                    b.HasIndex("Team2ID");

                    b.HasIndex("TournamentID");

                    b.HasIndex("WinnerTeamID");

                    b.ToTable("BracketMatches");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Disciplines", b =>
                {
                    b.Property<int>("DisciplineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlayersPerTeam")
                        .HasColumnType("int");

                    b.HasKey("DisciplineID");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Players", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerID"));

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("PlayerID");

                    b.HasIndex("TeamID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.RoundRobinMatches", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchID"));

                    b.Property<DateTime?>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Team1ID")
                        .HasColumnType("int");

                    b.Property<int?>("Team1Score")
                        .HasColumnType("int");

                    b.Property<int>("Team2ID")
                        .HasColumnType("int");

                    b.Property<int?>("Team2Score")
                        .HasColumnType("int");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("MatchID");

                    b.HasIndex("Team1ID");

                    b.HasIndex("Team2ID");

                    b.HasIndex("TournamentID");

                    b.ToTable("RoundRobinMatches");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Teams", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("TeamID");

                    b.HasIndex("TournamentID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.TournamentTypes", b =>
                {
                    b.Property<int>("TournamentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentTypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TournamentTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TournamentTypeID");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Tournaments", b =>
                {
                    b.Property<int>("TournamentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisciplineID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfTeams")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TournamentTypeID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WinnerTeamID")
                        .HasColumnType("int");

                    b.HasKey("TournamentID");

                    b.HasIndex("DisciplineID");

                    b.HasIndex("TournamentTypeID");

                    b.HasIndex("UserID");

                    b.HasIndex("WinnerTeamID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.BracketMatches", b =>
                {
                    b.HasOne("tournament_manager_backend.Models.tournament.Teams", "Team1")
                        .WithMany("BracketMatchesAsTeam1")
                        .HasForeignKey("Team1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tournament_manager_backend.Models.tournament.Teams", "Team2")
                        .WithMany("BracketMatchesAsTeam2")
                        .HasForeignKey("Team2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tournament_manager_backend.Models.tournament.Tournaments", "Tournament")
                        .WithMany("BracketMatches")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tournament_manager_backend.Models.tournament.Teams", "WinnerTeam")
                        .WithMany("BracketMatchesAsWinner")
                        .HasForeignKey("WinnerTeamID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Team1");

                    b.Navigation("Team2");

                    b.Navigation("Tournament");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Players", b =>
                {
                    b.HasOne("tournament_manager_backend.Models.tournament.Teams", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.RoundRobinMatches", b =>
                {
                    b.HasOne("tournament_manager_backend.Models.tournament.Teams", "Team1")
                        .WithMany("RoundRobinMatchesAsTeam1")
                        .HasForeignKey("Team1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tournament_manager_backend.Models.tournament.Teams", "Team2")
                        .WithMany("RoundRobinMatchesAsTeam2")
                        .HasForeignKey("Team2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tournament_manager_backend.Models.tournament.Tournaments", "Tournament")
                        .WithMany("RoundRobinMatches")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team1");

                    b.Navigation("Team2");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Teams", b =>
                {
                    b.HasOne("tournament_manager_backend.Models.tournament.Tournaments", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Tournaments", b =>
                {
                    b.HasOne("tournament_manager_backend.Models.tournament.Disciplines", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tournament_manager_backend.Models.tournament.TournamentTypes", "TournamentType")
                        .WithMany()
                        .HasForeignKey("TournamentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tournament_manager_backend.Models.Auth.Users", "User")
                        .WithMany("Tournaments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tournament_manager_backend.Models.tournament.Teams", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Discipline");

                    b.Navigation("TournamentType");

                    b.Navigation("User");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.Auth.Users", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Teams", b =>
                {
                    b.Navigation("BracketMatchesAsTeam1");

                    b.Navigation("BracketMatchesAsTeam2");

                    b.Navigation("BracketMatchesAsWinner");

                    b.Navigation("RoundRobinMatchesAsTeam1");

                    b.Navigation("RoundRobinMatchesAsTeam2");
                });

            modelBuilder.Entity("tournament_manager_backend.Models.tournament.Tournaments", b =>
                {
                    b.Navigation("BracketMatches");

                    b.Navigation("RoundRobinMatches");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
